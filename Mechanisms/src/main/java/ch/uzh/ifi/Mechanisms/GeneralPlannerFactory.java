package ch.uzh.ifi.Mechanisms;

import ch.uzh.ifi.MechanismDesignPrimitives.Type;
import java.util.List;


public class GeneralPlannerFactory implements IPlannerFactory
{
	/*
	 * Constructor.
	 */
	public GeneralPlannerFactory(int numberOfBuyers, int numberOfSellers, List<Type> types, boolean isInjectable, int numberOfPlans, int minSellersPerPlan, int maxSellersPerPlan, double errorVarianceFactor)
	{
		_numberOfBuyers = numberOfBuyers;
		_numberOfSellers = numberOfSellers;
		_types = types;
		_isInjectable = isInjectable;
		_numberOfPlans = numberOfPlans;
		_minSellersPerPlan = minSellersPerPlan;
		_maxSellersPerPlan = maxSellersPerPlan;
		_errorVarianceFactor = errorVarianceFactor;
	}
	
	/*
	 * (non-Javadoc)
	 * @see Mechanisms.IPlannerFactory#producePlanner()
	 */
	@Override
	public Planner producePlanner() 
	{
		GeneralErrorPlanner planner = new GeneralErrorPlanner(_numberOfBuyers, _numberOfSellers, _types);
		planner.setNumberOfPlans(_numberOfPlans);
		planner.setMinSellersPerPlan(_minSellersPerPlan);
		planner.setMaxSellersPerPlan(_maxSellersPerPlan);
		planner.setErrorVarianceFactor(_errorVarianceFactor);
		
		if( _isInjectable )
			planner.makeInjectable();
		else
			planner.makeNonInjectable();
		
		planner.reset(_types);
		planner.generatePlans();
		return planner;
	}

	/*
	 * (non-Javadoc)
	 * @see Mechanisms.IPlannerFactory#producePlanner()
	 */
	@Override
	public Planner producePlanner(long seed) 
	{
		GeneralErrorPlanner planner = new GeneralErrorPlanner(_numberOfBuyers, _numberOfSellers, _types, seed);
		planner.setNumberOfPlans(_numberOfPlans);
		planner.setMinSellersPerPlan(_minSellersPerPlan);
		planner.setMaxSellersPerPlan(_maxSellersPerPlan);
		planner.setErrorVarianceFactor(_errorVarianceFactor);
		
		if( _isInjectable )
			planner.makeInjectable();
		else
			planner.makeNonInjectable();
		
		planner.reset(_types);
		planner.generatePlans();
		return planner;
	}
	
	private boolean _isInjectable;									//A flag indicating if an error can be injected into plans
	private double  _errorVarianceFactor;
	private List<Type> _types;										//The list of types reported to the planner	

	private int _numberOfBuyers;									//The number of buyers
	private int _numberOfSellers;									//The number of sellers
	
	private int _numberOfPlans;										//The max number of plans can be generated by the planner
	private int _minSellersPerPlan;									//The min number of sellers per plan
	private int _maxSellersPerPlan;									//The max number of sellers per plan
}
